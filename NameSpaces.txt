NAMESPACES
In Kubernetes, namespaces provides a mechanism for isolating groups of resources within a single cluster. 
Names of resources need to be unique within a namespace, but not across namespaces. Namespace-based scoping is applicable only for 
namespaced objects (e.g. Deployments, Services, etc) and not for cluster-wide objects (e.g. StorageClass, Nodes, PersistentVolumes, etc).


WHEN TO USE MULTIPLE NAMESPACES

Namespaces are intended for use in environments with many users spread across multiple teams, or projects. For clusters with a few to 
tens of users, you should not need to create or think about namespaces at all. Start using namespaces when you need the features they 
provide.

Namespaces provide a scope for names. Names of resources need to be unique within a namespace, but not across namespaces. 
Namespaces cannot be nested inside one another and each Kubernetes resource can only be in one namespace.

Namespaces are a way to divide cluster resources between multiple users (via resource quota).

It is not necessary to use multiple namespaces to separate slightly different resources, such as different versions of the 
same software: use labels to distinguish resources within the same namespace.

Note: For a production cluster, consider not using the default namespace. Instead, make other namespaces and use those.




COMPONENTS WHICH CANNOT BE CREATED WITHIN A NAMESPACE IN KUBERNETES

Cluster-Wide Resources:
These resources are not tied to a specific namespace and are available cluster-wide:

ClusterRole and ClusterRoleBinding: These control access to resources across all namespaces.
CustomResourceDefinition (CRD): CRDs are used to define custom resources, and they are not bound to a specific namespace.
StorageClass: Defines storage classes that are available for all namespaces.
Node: Nodes represent the individual worker nodes in the cluster and are not associated with namespaces.
PersistentVolume: Represents a piece of networked storage in the cluster, available to all namespaces.
Namespace: Although you can create namespaces, they are a cluster-level resource used to organize other resources.
Certain Control Plane Resources:
Resources that are integral to the functioning of the Kubernetes control plane and aren't created directly by users:

APIService: Represents the API server, but it's not created directly by users.
Endpoints: Created and managed by the Kubernetes control plane to represent network endpoints.
Cluster Configuration:
Resources related to cluster-wide configurations or global settings:

MutatingWebhookConfiguration and ValidatingWebhookConfiguration: These configure admission controllers for the entire cluster.
APIServer, ControllerManager, Scheduler: These are core components of the Kubernetes control plane, and you don't create them directly.
Remember, most other resource types, such as Deployments, Services, Pods, ConfigMaps, Secrets, and more, can be created within namespaces 
to provide isolation and better resource management. Always refer to the official Kubernetes documentation for the latest information on 
resource types and their scoping within namespaces.